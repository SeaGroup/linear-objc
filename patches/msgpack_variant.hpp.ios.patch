diff --git a/include/msgpack/adaptor/boost/msgpack_variant.hpp b/include/msgpack/adaptor/boost/msgpack_variant.hpp
index 4bbeebd..7c82d8b 100644
--- a/include/msgpack/adaptor/boost/msgpack_variant.hpp
+++ b/include/msgpack/adaptor/boost/msgpack_variant.hpp
@@ -51,7 +51,7 @@ namespace type {
 template <typename STR, typename BIN, typename EXT>
 struct basic_variant :
     boost::variant<
-        nil,               // NIL
+        nil_,               // NIL
         bool,              // BOOL
         int64_t,           // NEGATIVE_INTEGER
         uint64_t,          // POSITIVE_INTEGER
@@ -70,7 +70,7 @@ struct basic_variant :
     >,
     private boost::totally_ordered<basic_variant<STR, BIN, EXT> > {
     typedef boost::variant<
-        nil,               // NIL
+        nil_,               // NIL
         bool,              // BOOL
         int64_t,           // NEGATIVE_INTEGER
         uint64_t,          // POSITIVE_INTEGER
@@ -112,7 +112,7 @@ struct basic_variant :
     basic_variant(unsigned long long v):base(uint64_t(v)) {}
 
     bool is_nil() const {
-        return boost::get<nil>(this);
+        return boost::get<nil_>(this);
     }
     bool is_bool() const {
         return boost::get<bool>(this);
@@ -276,7 +276,7 @@ struct as<msgpack::type::basic_variant<STR, BIN, EXT> > {
     msgpack::type::basic_variant<STR, BIN, EXT> operator()(msgpack::object const& o) const {
         switch(o.type) {
         case type::NIL:
-            return o.as<msgpack::type::nil>();
+            return o.as<msgpack::type::nil_>();
         case type::BOOLEAN:
             return o.as<bool>();
         case type::POSITIVE_INTEGER:
@@ -312,7 +312,7 @@ struct convert<msgpack::type::basic_variant<STR, BIN, EXT> > {
         msgpack::type::basic_variant<STR, BIN, EXT>& v) const {
         switch(o.type) {
         case type::NIL:
-            v = o.as<msgpack::type::nil>();
+            v = o.as<msgpack::type::nil_>();
             break;
         case type::BOOLEAN:
             v = o.as<bool>();
@@ -374,8 +374,8 @@ struct pack<msgpack::type::basic_variant<STR, BIN, EXT> > {
 namespace detail {
 
 struct object_imp : boost::static_visitor<void> {
-    void operator()(msgpack::type::nil const& v) const {
-        object<msgpack::type::nil>()(o_, v);
+    void operator()(msgpack::type::nil_ const& v) const {
+        object<msgpack::type::nil_>()(o_, v);
     }
     void operator()(bool const& v) const {
         object<bool>()(o_, v);
