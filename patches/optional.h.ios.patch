diff --git a/include/linear/optional.h b/include/linear/optional.h
index f8c49a7..81bbd12 100644
--- a/include/linear/optional.h
+++ b/include/linear/optional.h
@@ -27,7 +27,7 @@ class optional {
  public:
   optional() : initialized_(false) {
   }
-  optional(linear::type::nil) : initialized_(false) {
+  optional(linear::type::nil_) : initialized_(false) {
   }
   optional(const optional<T>& other) {
     initialized_ = other.initialized_;
@@ -40,7 +40,7 @@ class optional {
   ~optional() {
   }
 
-  optional& operator=(linear::type::nil) {
+  optional& operator=(linear::type::nil_) {
     initialized_ = false;
     return *this;
   }
@@ -112,7 +112,7 @@ class optional {
     if (initialized_) {
       pk.pack(value_);
     } else {
-      pk.pack(linear::type::nil());
+      pk.pack(linear::type::nil_());
     }
   }
   void msgpack_unpack(msgpack::object o) {
@@ -263,19 +263,19 @@ bool operator<(const linear::type::optional<T>& lhs, const linear::type::optiona
 }
 
 template <class T>
-bool operator==(const linear::type::optional<T>& opt, linear::type::nil) {
+bool operator==(const linear::type::optional<T>& opt, linear::type::nil_) {
   return !bool(opt);
 }
 template <class T>
-bool operator==(linear::type::nil, const linear::type::optional<T>& opt) {
+bool operator==(linear::type::nil_, const linear::type::optional<T>& opt) {
   return false;
 }
 template <class T>
-bool operator<(const linear::type::optional<T>& opt, linear::type::nil) {
+bool operator<(const linear::type::optional<T>& opt, linear::type::nil_) {
   return !bool(opt);
 }
 template <class T>
-bool operator<(linear::type::nil, const linear::type::optional<T>& opt) {
+bool operator<(linear::type::nil_, const linear::type::optional<T>& opt) {
   return bool(opt);
 }
 
